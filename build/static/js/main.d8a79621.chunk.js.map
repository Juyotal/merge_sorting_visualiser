{"version":3,"sources":["algorithms/merge_Sort.js","visualiser/visualiser.jsx","App.js","reportWebVitals.js","index.js"],"names":["getMergeSortAnimations","array","anim","length","auxArr","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","Svisualiser","props","state","this","resetArray","minn","maxx","random","setState","arraybars","document","getElementsByClassName","barOI","barTI","barOIstyle","style","barTIstyle","color","setTimeout","backgroundColor","barO","newH","height","map","value","idx","className","onClick","mergeSort","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d8a79621.chunk.js","sourcesContent":["// function mergesort(array) {\r\n//     if (array.length ===1) return array;\r\n//     const mid = Math.floor(array.length/2);\r\n//     const l_arr= mergesort(array.slice(0,mid));\r\n//     const r_arr= mergesort(array.slice(mid));\r\n//     const sortedArr = [];\r\n\r\n//     let i = 0,\r\n//     j = 0;\r\n//     while (i< l_arr.length && j< r_arr.length) {\r\n//         if (l_arr[i] < r_arr[j]){\r\n//             sortedArr.push(l_arr[i]);\r\n//             i++;\r\n//         }else  {\r\n//             sortedArr.push(r_arr[j]);\r\n//             j++; \r\n//         }}\r\n//     while (i<l_arr.length) sortedArr.push (l_arr[i++]);\r\n//     while (j<r_arr.length) sortedArr.push (r_arr[j++]);\r\n//     return sortedArr\r\n\r\n// } \r\n// const array = []\r\n// for (let i = 0; i<310; i++) {\r\n//   num =  Math.floor(Math.random() * (750 - 3) + 3);\r\n//  array.push(num)}\r\n\r\n//  console.log (mergesort(array))\r\n\r\nexport function getMergeSortAnimations(array) {\r\n    const anim = [];\r\n    if (array.length <= 1) return array;\r\n    const auxArr = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxArr, anim);\r\n    return anim;\r\n  }\r\n  \r\n  function mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxArr,\r\n    anim,\r\n  ) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxArr, startIdx, middleIdx, mainArray, anim);\r\n    mergeSortHelper(auxArr, middleIdx + 1, endIdx, mainArray, anim);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxArr, anim);\r\n  }\r\n  \r\n  function doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxArr,\r\n    anim,\r\n  ) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n    \r\n      anim.push([i, j]);\r\n     \r\n      anim.push([i, j]);\r\n\r\n      if (auxArr[i] <= auxArr[j]) {\r\n       \r\n        anim.push([k, auxArr[i]]);\r\n\r\n        mainArray[k++] = auxArr[i++];\r\n      } else {\r\n      \r\n        anim.push([k, auxArr[j]]);\r\n        mainArray[k++] = auxArr[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n     \r\n      anim.push([i, i]);\r\n    \r\n      anim.push([i, i]);\r\n    \r\n      anim.push([k, auxArr[i]]);\r\n\r\n      mainArray[k++] = auxArr[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n    \r\n      anim.push([j, j]);\r\n      \r\n      anim.push([j, j]);\r\n      \r\n      anim.push([k, auxArr[j]]);\r\n      mainArray[k++] = auxArr[j++];\r\n    }\r\n  }","\r\nimport React from 'react';\r\nimport './visualiser.css';\r\nimport { getMergeSortAnimations } from '../algorithms/merge_Sort';\r\n\r\n\r\nconst ANIM_SPEED = 10;\r\n\r\nconst NUM_BARS = 120;\r\n\r\nconst PRIM_COL = 'black';\r\n\r\nconst SEC_COL = 'red';\r\n\r\nexport default class Svisualiser extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n        };\r\n    }\r\n    componentDidMount(){\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        for (let i = 0; i<NUM_BARS; i++){\r\n            array.push(randomizer(20,800));\r\n        } \r\n        this.setState({array});\r\n    }\r\n\r\n    mergeSort (){\r\n        const anim = getMergeSortAnimations (this.state.array);\r\n        for (let i = 0; i < anim.length; i++){\r\n            const arraybars = document.getElementsByClassName('array-bar');\r\n            const iscolorchange = i % 3 !== 2;\r\n            if (iscolorchange){\r\n                const [barOI, barTI] = anim[i];\r\n                const barOIstyle = arraybars[barOI].style;\r\n                const barTIstyle = arraybars[barTI].style;\r\n                const color = i % 3 === 0? SEC_COL: PRIM_COL;\r\n\r\n                setTimeout(() =>{\r\n                    barOIstyle.backgroundColor = color;\r\n                    barTIstyle.backgroundColor = color;\r\n\r\n                }, i * ANIM_SPEED);\r\n\r\n            }else{\r\n                setTimeout(() =>{\r\n                    const [barO, newH] = anim[i];\r\n                    const barOstyle = arraybars[barO].style;\r\n                    barOstyle.height =  `${newH}px` ;\r\n                }, i * ANIM_SPEED)\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n    render(){\r\n        const {array} = this.state;\r\n    \r\n\r\n        return (\r\n            <div>{array.map ((value, idx) => (\r\n                <div className=\"array-bar\" \r\n                key={idx}\r\n                style = {{ height: `${value}px` }}></div> \r\n            )) } \r\n            <p></p>\r\n            <button onClick = {()=> this.resetArray()}>Generate new Array.</button>\r\n            <button onClick = {()=> this.mergeSort()}>MergeSort.</button>\r\n           \r\n             </div> \r\n\r\n       \r\n\r\n        )}\r\n\r\n\r\n}\r\n\r\nfunction randomizer(minn, maxx) {\r\nreturn Math.floor(Math.random() * (maxx - minn+1) + minn);\r\n}\r\n        ","import Svisualiser from './visualiser/visualiser';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Svisualiser> </Svisualiser>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"ast":null,"code":"// function mergesort(array) {\n//     if (array.length ===1) return array;\n//     const mid = Math.floor(array.length/2);\n//     const l_arr= mergesort(array.slice(0,mid));\n//     const r_arr= mergesort(array.slice(mid));\n//     const sortedArr = [];\n//     let i = 0,\n//     j = 0;\n//     while (i< l_arr.length && j< r_arr.length) {\n//         if (l_arr[i] < r_arr[j]){\n//             sortedArr.push(l_arr[i]);\n//             i++;\n//         }else  {\n//             sortedArr.push(r_arr[j]);\n//             j++; \n//         }}\n//     while (i<l_arr.length) sortedArr.push (l_arr[i++]);\n//     while (j<r_arr.length) sortedArr.push (r_arr[j++]);\n//     return sortedArr\n// } \n// const array = []\n// for (let i = 0; i<310; i++) {\n//   num =  Math.floor(Math.random() * (750 - 3) + 3);\n//  array.push(num)}\n//  console.log (mergesort(array))\nexport function getMergeSortAnimations(array) {\n  const anim = [];\n  if (array.length <= 1) return array;\n  const auxArr = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxArr, anim);\n  return anim;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxArr, anim) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxArr, startIdx, middleIdx, mainArray, anim);\n  mergeSortHelper(auxArr, middleIdx + 1, endIdx, mainArray, anim);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxArr, anim);\n}\n\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxArr, anim) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n\n  while (i <= middleIdx && j <= endIdx) {\n    anim.push([i, j]);\n    anim.push([i, j]);\n\n    if (auxArr[i] <= auxArr[j]) {\n      anim.push([k, auxArr[i]]);\n      mainArray[k++] = auxArr[i++];\n    } else {\n      anim.push([k, auxArr[j]]);\n      mainArray[k++] = auxArr[j++];\n    }\n  }\n\n  while (i <= middleIdx) {\n    anim.push([i, i]);\n    anim.push([i, i]);\n    anim.push([k, auxArr[i]]);\n    mainArray[k++] = auxArr[i++];\n  }\n\n  while (j <= endIdx) {\n    anim.push([j, j]);\n    anim.push([j, j]);\n    anim.push([k, auxArr[j]]);\n    mainArray[k++] = auxArr[j++];\n  }\n}","map":{"version":3,"sources":["C:/Users/p/3D Objects/sorting_algo/sort_sort_sort/src/algorithms/merge_Sort.js"],"names":["getMergeSortAnimations","array","anim","length","auxArr","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","doMerge","k","i","j","push"],"mappings":"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","sourcesContent":["// function mergesort(array) {\r\n//     if (array.length ===1) return array;\r\n//     const mid = Math.floor(array.length/2);\r\n//     const l_arr= mergesort(array.slice(0,mid));\r\n//     const r_arr= mergesort(array.slice(mid));\r\n//     const sortedArr = [];\r\n\r\n//     let i = 0,\r\n//     j = 0;\r\n//     while (i< l_arr.length && j< r_arr.length) {\r\n//         if (l_arr[i] < r_arr[j]){\r\n//             sortedArr.push(l_arr[i]);\r\n//             i++;\r\n//         }else  {\r\n//             sortedArr.push(r_arr[j]);\r\n//             j++; \r\n//         }}\r\n//     while (i<l_arr.length) sortedArr.push (l_arr[i++]);\r\n//     while (j<r_arr.length) sortedArr.push (r_arr[j++]);\r\n//     return sortedArr\r\n\r\n// } \r\n// const array = []\r\n// for (let i = 0; i<310; i++) {\r\n//   num =  Math.floor(Math.random() * (750 - 3) + 3);\r\n//  array.push(num)}\r\n\r\n//  console.log (mergesort(array))\r\n\r\nexport function getMergeSortAnimations(array) {\r\n    const anim = [];\r\n    if (array.length <= 1) return array;\r\n    const auxArr = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxArr, anim);\r\n    return anim;\r\n  }\r\n  \r\n  function mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxArr,\r\n    anim,\r\n  ) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxArr, startIdx, middleIdx, mainArray, anim);\r\n    mergeSortHelper(auxArr, middleIdx + 1, endIdx, mainArray, anim);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxArr, anim);\r\n  }\r\n  \r\n  function doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxArr,\r\n    anim,\r\n  ) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n    \r\n      anim.push([i, j]);\r\n     \r\n      anim.push([i, j]);\r\n\r\n      if (auxArr[i] <= auxArr[j]) {\r\n       \r\n        anim.push([k, auxArr[i]]);\r\n\r\n        mainArray[k++] = auxArr[i++];\r\n      } else {\r\n      \r\n        anim.push([k, auxArr[j]]);\r\n        mainArray[k++] = auxArr[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n     \r\n      anim.push([i, i]);\r\n    \r\n      anim.push([i, i]);\r\n    \r\n      anim.push([k, auxArr[i]]);\r\n\r\n      mainArray[k++] = auxArr[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n    \r\n      anim.push([j, j]);\r\n      \r\n      anim.push([j, j]);\r\n      \r\n      anim.push([k, auxArr[j]]);\r\n      mainArray[k++] = auxArr[j++];\r\n    }\r\n  }"]},"metadata":{},"sourceType":"module"}
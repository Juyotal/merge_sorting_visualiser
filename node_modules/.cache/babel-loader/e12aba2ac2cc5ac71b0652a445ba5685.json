{"ast":null,"code":"// function mergesort(array) {\n//     if (array.length ===1) return array;\n//     const mid = Math.floor(array.length/2);\n//     const l_arr= mergesort(array.slice(0,mid));\n//     const r_arr= mergesort(array.slice(mid));\n//     const sortedArr = [];\n//     let i = 0,\n//     j = 0;\n//     while (i< l_arr.length && j< r_arr.length) {\n//         if (l_arr[i] < r_arr[j]){\n//             sortedArr.push(l_arr[i]);\n//             i++;\n//         }else  {\n//             sortedArr.push(r_arr[j]);\n//             j++; \n//         }}\n//     while (i<l_arr.length) sortedArr.push (l_arr[i++]);\n//     while (j<r_arr.length) sortedArr.push (r_arr[j++]);\n//     return sortedArr\n// } \n// const array = []\n// for (let i = 0; i<310; i++) {\n//   num =  Math.floor(Math.random() * (750 - 3) + 3);\n//  array.push(num)}\n//  console.log (mergesort(array))\nexport function getMergeSortAnimations(array){var anim=[];if(array.length<=1)return array;var auxArr=array.slice();mergeSortHelper(array,0,array.length-1,auxArr,anim);return anim;}function mergeSortHelper(mainArray,startIdx,endIdx,auxArr,anim){if(startIdx===endIdx)return;var middleIdx=Math.floor((startIdx+endIdx)/2);mergeSortHelper(auxArr,startIdx,middleIdx,mainArray,anim);mergeSortHelper(auxArr,middleIdx+1,endIdx,mainArray,anim);doMerge(mainArray,startIdx,middleIdx,endIdx,auxArr,anim);}function doMerge(mainArray,startIdx,middleIdx,endIdx,auxArr,anim){var k=startIdx;var i=startIdx;var j=middleIdx+1;while(i<=middleIdx&&j<=endIdx){anim.push([i,j]);anim.push([i,j]);if(auxArr[i]<=auxArr[j]){anim.push([k,auxArr[i]]);mainArray[k++]=auxArr[i++];}else{anim.push([k,auxArr[j]]);mainArray[k++]=auxArr[j++];}}while(i<=middleIdx){anim.push([i,i]);anim.push([i,i]);anim.push([k,auxArr[i]]);mainArray[k++]=auxArr[i++];}while(j<=endIdx){anim.push([j,j]);anim.push([j,j]);anim.push([k,auxArr[j]]);mainArray[k++]=auxArr[j++];}}","map":{"version":3,"sources":["C:/Users/p/3D Objects/sorting_algo/sort_sort_sort/src/algorithms/merge_Sort.js"],"names":["getMergeSortAnimations","array","anim","length","auxArr","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","doMerge","k","i","j","push"],"mappings":"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","sourcesContent":["// function mergesort(array) {\r\n//     if (array.length ===1) return array;\r\n//     const mid = Math.floor(array.length/2);\r\n//     const l_arr= mergesort(array.slice(0,mid));\r\n//     const r_arr= mergesort(array.slice(mid));\r\n//     const sortedArr = [];\r\n\r\n//     let i = 0,\r\n//     j = 0;\r\n//     while (i< l_arr.length && j< r_arr.length) {\r\n//         if (l_arr[i] < r_arr[j]){\r\n//             sortedArr.push(l_arr[i]);\r\n//             i++;\r\n//         }else  {\r\n//             sortedArr.push(r_arr[j]);\r\n//             j++; \r\n//         }}\r\n//     while (i<l_arr.length) sortedArr.push (l_arr[i++]);\r\n//     while (j<r_arr.length) sortedArr.push (r_arr[j++]);\r\n//     return sortedArr\r\n\r\n// } \r\n// const array = []\r\n// for (let i = 0; i<310; i++) {\r\n//   num =  Math.floor(Math.random() * (750 - 3) + 3);\r\n//  array.push(num)}\r\n\r\n//  console.log (mergesort(array))\r\n\r\nexport function getMergeSortAnimations(array) {\r\n    const anim = [];\r\n    if (array.length <= 1) return array;\r\n    const auxArr = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxArr, anim);\r\n    return anim;\r\n  }\r\n  \r\n  function mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxArr,\r\n    anim,\r\n  ) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxArr, startIdx, middleIdx, mainArray, anim);\r\n    mergeSortHelper(auxArr, middleIdx + 1, endIdx, mainArray, anim);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxArr, anim);\r\n  }\r\n  \r\n  function doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxArr,\r\n    anim,\r\n  ) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n    \r\n      anim.push([i, j]);\r\n     \r\n      anim.push([i, j]);\r\n\r\n      if (auxArr[i] <= auxArr[j]) {\r\n       \r\n        anim.push([k, auxArr[i]]);\r\n\r\n        mainArray[k++] = auxArr[i++];\r\n      } else {\r\n      \r\n        anim.push([k, auxArr[j]]);\r\n        mainArray[k++] = auxArr[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n     \r\n      anim.push([i, i]);\r\n    \r\n      anim.push([i, i]);\r\n    \r\n      anim.push([k, auxArr[i]]);\r\n\r\n      mainArray[k++] = auxArr[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n    \r\n      anim.push([j, j]);\r\n      \r\n      anim.push([j, j]);\r\n      \r\n      anim.push([k, auxArr[j]]);\r\n      mainArray[k++] = auxArr[j++];\r\n    }\r\n  }"]},"metadata":{},"sourceType":"module"}